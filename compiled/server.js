const express = require('express');
const mongoose = require('mongoose');
const { fOne, fTwo, fThree } = require("./db");

const dbURI = 'mongodb+srv://asemOne:asem1234@cluster0.xqniz.mongodb.net/ChallengThree?retryWrites=true&w=majority';
const connect = mongoose.connect(dbURI, {
    useNewUrlParser: true, useUnifiedTopology: true,
    useCreateIndex: true, useFindAndModify: false
}).then(() => console.log('MongoDB Connected...')).catch(err => console.log(err));

let app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.static(__dirname + '/public'));
app.use(express.json());

let port = 3000;
app.get("/app", (req, res) => {
    res.sendFile(__dirname + '/./compiled/client/app.js');
});

app.post('/', (req, res) => {
    res.send(req.body);
    let data = req.body;
    let fOneObj = {
        name: data.Name,
        email: data.Email,
        password: data.Password
    };
    let fTwoObj = {
        lineOne: data.LineOne,
        lineTwo: data.LineTwo,
        city: data.City,
        state: data.State,
        zipCode: data.Zipcode
    };
    let fThreeObj = {
        card: data.CreditCardNumber,
        expDate: data.ExpirationDate,
        cvv: data.CVV,
        billingZipCode: data.BillingZipcode
    };

    let fOne = new fOne(fOneObj);
    fOne.save();
    let fTwo = new fTwo(fTwoObj);
    fTwo.save();
    let fThree = new fThree(fThreeObj);
    fThree.save();
    res.send(data);
});
app.listen(port, () => {
    console.log(`listening `);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsIm1vbmdvb3NlIiwiZk9uZSIsImZUd28iLCJmVGhyZWUiLCJkYlVSSSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJ1c2VDcmVhdGVJbmRleCIsInVzZUZpbmRBbmRNb2RpZnkiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwiYXBwIiwidXNlIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwic3RhdGljIiwiX19kaXJuYW1lIiwianNvbiIsInBvcnQiLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kRmlsZSIsInBvc3QiLCJzZW5kIiwiYm9keSIsImRhdGEiLCJmT25lT2JqIiwibmFtZSIsIk5hbWUiLCJlbWFpbCIsIkVtYWlsIiwicGFzc3dvcmQiLCJQYXNzd29yZCIsImZUd29PYmoiLCJsaW5lT25lIiwiTGluZU9uZSIsImxpbmVUd28iLCJMaW5lVHdvIiwiY2l0eSIsIkNpdHkiLCJzdGF0ZSIsIlN0YXRlIiwiemlwQ29kZSIsIlppcGNvZGUiLCJmVGhyZWVPYmoiLCJjYXJkIiwiQ3JlZGl0Q2FyZE51bWJlciIsImV4cERhdGUiLCJFeHBpcmF0aW9uRGF0ZSIsImN2diIsIkNWViIsImJpbGxpbmdaaXBDb2RlIiwiQmlsbGluZ1ppcGNvZGUiLCJzYXZlIiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxNQUFNQyxXQUFXRCxRQUFRLFVBQVIsQ0FBakI7QUFDQSxNQUFNLEVBQUVFLElBQUYsRUFBUUMsSUFBUixFQUFjQyxNQUFkLEtBQXlCSixRQUFRLE1BQVIsQ0FBL0I7O0FBR0EsTUFBTUssUUFBUSxxR0FBZDtBQUNBLE1BQU1DLFVBQVVMLFNBQVNLLE9BQVQsQ0FBaUJELEtBQWpCLEVBQ1o7QUFDSUUscUJBQWlCLElBRHJCLEVBQzJCQyxvQkFBb0IsSUFEL0M7QUFFSUMsb0JBQWdCLElBRnBCLEVBRTBCQyxrQkFBa0I7QUFGNUMsQ0FEWSxFQUtYQyxJQUxXLENBS04sTUFBTUMsUUFBUUMsR0FBUixDQUFZLHNCQUFaLENBTEEsRUFNWEMsS0FOVyxDQU1MQyxPQUFPSCxRQUFRQyxHQUFSLENBQVlFLEdBQVosQ0FORixDQUFoQjs7QUFRQSxJQUFJQyxNQUFNakIsU0FBVjs7QUFFQWlCLElBQUlDLEdBQUosQ0FBUWxCLFFBQVFtQixVQUFSLENBQW1CLEVBQUVDLFVBQVUsSUFBWixFQUFuQixDQUFSO0FBQ0FILElBQUlDLEdBQUosQ0FBUWxCLFFBQVFxQixNQUFSLENBQWVDLFlBQVksU0FBM0IsQ0FBUjtBQUNBTCxJQUFJQyxHQUFKLENBQVFsQixRQUFRdUIsSUFBUixFQUFSOztBQUdBLElBQUlDLE9BQU8sSUFBWDtBQUNBUCxJQUFJUSxHQUFKLENBQVEsTUFBUixFQUFnQixDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUMxQkEsUUFBSUMsUUFBSixDQUFhTixZQUFZLDJCQUF6QjtBQUNILENBRkQ7O0FBS0FMLElBQUlZLElBQUosQ0FBUyxHQUFULEVBQWMsQ0FBQ0gsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDeEJBLFFBQUlHLElBQUosQ0FBU0osSUFBSUssSUFBYjtBQUNBLFFBQUlDLE9BQU9OLElBQUlLLElBQWY7QUFDQSxRQUFJRSxVQUFVO0FBQ1ZDLGNBQU1GLEtBQUtHLElBREQ7QUFFVkMsZUFBT0osS0FBS0ssS0FGRjtBQUdWQyxrQkFBVU4sS0FBS087QUFITCxLQUFkO0FBS0EsUUFBSUMsVUFBVTtBQUNWQyxpQkFBU1QsS0FBS1UsT0FESjtBQUVWQyxpQkFBU1gsS0FBS1ksT0FGSjtBQUdWQyxjQUFNYixLQUFLYyxJQUhEO0FBSVZDLGVBQU9mLEtBQUtnQixLQUpGO0FBS1ZDLGlCQUFTakIsS0FBS2tCO0FBTEosS0FBZDtBQU9BLFFBQUlDLFlBQVk7QUFDWkMsY0FBTXBCLEtBQUtxQixnQkFEQztBQUVaQyxpQkFBU3RCLEtBQUt1QixjQUZGO0FBR1pDLGFBQUt4QixLQUFLeUIsR0FIRTtBQUlaQyx3QkFBZ0IxQixLQUFLMkI7QUFKVCxLQUFoQjs7QUFPQSxRQUFJeEQsT0FBTyxJQUFJQSxJQUFKLENBQVM4QixPQUFULENBQVg7QUFDQTlCLFNBQUt5RCxJQUFMO0FBQ0EsUUFBSXhELE9BQU8sSUFBSUEsSUFBSixDQUFTb0MsT0FBVCxDQUFYO0FBQ0FwQyxTQUFLd0QsSUFBTDtBQUNBLFFBQUl2RCxTQUFTLElBQUlBLE1BQUosQ0FBVzhDLFNBQVgsQ0FBYjtBQUNBOUMsV0FBT3VELElBQVA7QUFDQWpDLFFBQUlHLElBQUosQ0FBU0UsSUFBVDtBQUVILENBOUJEO0FBK0JBZixJQUFJNEMsTUFBSixDQUFXckMsSUFBWCxFQUFpQixNQUFNO0FBQ25CWCxZQUFRQyxHQUFSLENBQWEsWUFBYjtBQUNILENBRkQiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcclxuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5jb25zdCB7IGZPbmUsIGZUd28sIGZUaHJlZSB9ID0gcmVxdWlyZShcIi4vZGJcIilcclxuXHJcblxyXG5jb25zdCBkYlVSSSA9ICdtb25nb2RiK3NydjovL2FzZW1PbmU6YXNlbTEyMzRAY2x1c3RlcjAueHFuaXoubW9uZ29kYi5uZXQvQ2hhbGxlbmdUaHJlZT9yZXRyeVdyaXRlcz10cnVlJnc9bWFqb3JpdHknXHJcbmNvbnN0IGNvbm5lY3QgPSBtb25nb29zZS5jb25uZWN0KGRiVVJJLFxyXG4gICAge1xyXG4gICAgICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSwgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLFxyXG4gICAgICAgIHVzZUNyZWF0ZUluZGV4OiB0cnVlLCB1c2VGaW5kQW5kTW9kaWZ5OiBmYWxzZVxyXG4gICAgfSlcclxuICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdNb25nb0RCIENvbm5lY3RlZC4uLicpKVxyXG4gICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxuXHJcbmxldCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKVxyXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKF9fZGlybmFtZSArICcvcHVibGljJykpXHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpXHJcblxyXG5cclxubGV0IHBvcnQgPSAzMDAwO1xyXG5hcHAuZ2V0KFwiL2FwcFwiLCAocmVxLCByZXMpID0+IHtcclxuICAgIHJlcy5zZW5kRmlsZShfX2Rpcm5hbWUgKyAnLy4vY29tcGlsZWQvY2xpZW50L2FwcC5qcycpXHJcbn0pXHJcblxyXG5cclxuYXBwLnBvc3QoJy8nLCAocmVxLCByZXMpID0+IHtcclxuICAgIHJlcy5zZW5kKHJlcS5ib2R5KVxyXG4gICAgbGV0IGRhdGEgPSByZXEuYm9keTtcclxuICAgIGxldCBmT25lT2JqID0ge1xyXG4gICAgICAgIG5hbWU6IGRhdGEuTmFtZSxcclxuICAgICAgICBlbWFpbDogZGF0YS5FbWFpbCxcclxuICAgICAgICBwYXNzd29yZDogZGF0YS5QYXNzd29yZFxyXG4gICAgfVxyXG4gICAgbGV0IGZUd29PYmogPSB7XHJcbiAgICAgICAgbGluZU9uZTogZGF0YS5MaW5lT25lLFxyXG4gICAgICAgIGxpbmVUd286IGRhdGEuTGluZVR3byxcclxuICAgICAgICBjaXR5OiBkYXRhLkNpdHksXHJcbiAgICAgICAgc3RhdGU6IGRhdGEuU3RhdGUsXHJcbiAgICAgICAgemlwQ29kZTogZGF0YS5aaXBjb2RlLFxyXG4gICAgfVxyXG4gICAgbGV0IGZUaHJlZU9iaiA9IHtcclxuICAgICAgICBjYXJkOiBkYXRhLkNyZWRpdENhcmROdW1iZXIsXHJcbiAgICAgICAgZXhwRGF0ZTogZGF0YS5FeHBpcmF0aW9uRGF0ZSxcclxuICAgICAgICBjdnY6IGRhdGEuQ1ZWLFxyXG4gICAgICAgIGJpbGxpbmdaaXBDb2RlOiBkYXRhLkJpbGxpbmdaaXBjb2RlXHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGZPbmUgPSBuZXcgZk9uZShmT25lT2JqKVxyXG4gICAgZk9uZS5zYXZlKClcclxuICAgIGxldCBmVHdvID0gbmV3IGZUd28oZlR3b09iailcclxuICAgIGZUd28uc2F2ZSgpXHJcbiAgICBsZXQgZlRocmVlID0gbmV3IGZUaHJlZShmVGhyZWVPYmopXHJcbiAgICBmVGhyZWUuc2F2ZSgpXHJcbiAgICByZXMuc2VuZChkYXRhKVxyXG5cclxufSlcclxuYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhgbGlzdGVuaW5nIGApO1xyXG59KTtcclxuIl19