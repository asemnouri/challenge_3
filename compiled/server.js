const express = require('express');
const mongoose = require('mongoose');
const { fOne, fTwo, fThree } = require("./db");

const dbURI = 'mongodb+srv://asemOne:asem1234@cluster0.xqniz.mongodb.net/ChallengThree?retryWrites=true&w=majority';
const connect = mongoose.connect(dbURI, {
    useNewUrlParser: true, useUnifiedTopology: true,
    useCreateIndex: true, useFindAndModify: false
}).then(() => console.log('MongoDB Connected...')).catch(err => console.log(err));

let app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.static(__dirname + '/public'));
app.use(express.json());

let port = 3000;
app.get("/app", (req, res) => {
    res.sendFile(__dirname + '/./compiled/client/app.js');
});

// app.get("/checkout", (req, res) => {
//     res.sendFile(__dirname + '/./compiled/client/components/homePage.js')
// })
app.listen(port, () => {
    console.log(`listening `);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsIm1vbmdvb3NlIiwiZk9uZSIsImZUd28iLCJmVGhyZWUiLCJkYlVSSSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJ1c2VDcmVhdGVJbmRleCIsInVzZUZpbmRBbmRNb2RpZnkiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwiYXBwIiwidXNlIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwic3RhdGljIiwiX19kaXJuYW1lIiwianNvbiIsInBvcnQiLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kRmlsZSIsImxpc3RlbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBVUMsUUFBUSxTQUFSLENBQWhCO0FBQ0EsTUFBTUMsV0FBV0QsUUFBUSxVQUFSLENBQWpCO0FBQ0EsTUFBTSxFQUFDRSxJQUFELEVBQU1DLElBQU4sRUFBV0MsTUFBWCxLQUFtQkosUUFBUSxNQUFSLENBQXpCOztBQUdBLE1BQU1LLFFBQVEscUdBQWQ7QUFDQSxNQUFNQyxVQUFVTCxTQUFTSyxPQUFULENBQWlCRCxLQUFqQixFQUNaO0FBQ0lFLHFCQUFpQixJQURyQixFQUMyQkMsb0JBQW9CLElBRC9DO0FBRUlDLG9CQUFnQixJQUZwQixFQUUwQkMsa0JBQWtCO0FBRjVDLENBRFksRUFLWEMsSUFMVyxDQUtOLE1BQU1DLFFBQVFDLEdBQVIsQ0FBWSxzQkFBWixDQUxBLEVBTVhDLEtBTlcsQ0FNTEMsT0FBT0gsUUFBUUMsR0FBUixDQUFZRSxHQUFaLENBTkYsQ0FBaEI7O0FBUUEsSUFBSUMsTUFBTWpCLFNBQVY7O0FBRUFpQixJQUFJQyxHQUFKLENBQVFsQixRQUFRbUIsVUFBUixDQUFtQixFQUFFQyxVQUFVLElBQVosRUFBbkIsQ0FBUjtBQUNBSCxJQUFJQyxHQUFKLENBQVFsQixRQUFRcUIsTUFBUixDQUFlQyxZQUFZLFNBQTNCLENBQVI7QUFDQUwsSUFBSUMsR0FBSixDQUFRbEIsUUFBUXVCLElBQVIsRUFBUjs7QUFHQSxJQUFJQyxPQUFPLElBQVg7QUFDQVAsSUFBSVEsR0FBSixDQUFRLE1BQVIsRUFBZ0IsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDMUJBLFFBQUlDLFFBQUosQ0FBYU4sWUFBWSwyQkFBekI7QUFDSCxDQUZEOztBQUtBO0FBQ0E7QUFDQTtBQUNBTCxJQUFJWSxNQUFKLENBQVdMLElBQVgsRUFBaUIsTUFBTTtBQUNuQlgsWUFBUUMsR0FBUixDQUFhLFlBQWI7QUFDSCxDQUZEIiwiZmlsZSI6InNlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XHJcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcclxuY29uc3Qge2ZPbmUsZlR3byxmVGhyZWV9PXJlcXVpcmUoXCIuL2RiXCIpXHJcblxyXG5cclxuY29uc3QgZGJVUkkgPSAnbW9uZ29kYitzcnY6Ly9hc2VtT25lOmFzZW0xMjM0QGNsdXN0ZXIwLnhxbml6Lm1vbmdvZGIubmV0L0NoYWxsZW5nVGhyZWU/cmV0cnlXcml0ZXM9dHJ1ZSZ3PW1ham9yaXR5J1xyXG5jb25zdCBjb25uZWN0ID0gbW9uZ29vc2UuY29ubmVjdChkYlVSSSxcclxuICAgIHtcclxuICAgICAgICB1c2VOZXdVcmxQYXJzZXI6IHRydWUsIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSxcclxuICAgICAgICB1c2VDcmVhdGVJbmRleDogdHJ1ZSwgdXNlRmluZEFuZE1vZGlmeTogZmFsc2VcclxuICAgIH0pXHJcbiAgICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnTW9uZ29EQiBDb25uZWN0ZWQuLi4nKSlcclxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSk7XHJcblxyXG5sZXQgYXBwID0gZXhwcmVzcygpO1xyXG5cclxuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSlcclxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhfX2Rpcm5hbWUgKyAnL3B1YmxpYycpKVxyXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKVxyXG5cclxuXHJcbmxldCBwb3J0ID0gMzAwMDtcclxuYXBwLmdldChcIi9hcHBcIiwgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICByZXMuc2VuZEZpbGUoX19kaXJuYW1lICsgJy8uL2NvbXBpbGVkL2NsaWVudC9hcHAuanMnKVxyXG59KVxyXG5cclxuXHJcbi8vIGFwcC5nZXQoXCIvY2hlY2tvdXRcIiwgKHJlcSwgcmVzKSA9PiB7XHJcbi8vICAgICByZXMuc2VuZEZpbGUoX19kaXJuYW1lICsgJy8uL2NvbXBpbGVkL2NsaWVudC9jb21wb25lbnRzL2hvbWVQYWdlLmpzJylcclxuLy8gfSlcclxuYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhgbGlzdGVuaW5nIGApO1xyXG59KTtcclxuIl19